ðŸ“Œ RxJS nima?

RxJS (Reactive Extensions for JavaScript)
bu asinxron va hodisalar oqimi (event streams) bilan ishlashni osonlashtiradigan kutubxona.

Oddiy JSâ€™da callback yoki Promise ishlatamiz.

RxJS esa Observable degan yangi tushuncha beradi:

ðŸ‘‰ Observable -> bu vaqt davomida keladigan koâ€˜plab qiymatlarni kuzatish imkonini beradi.

Masalan:

Promise â†’ faqat bitta natija qaytaradi.

Observable â†’ cheksiz oqim boâ€˜lishi mumkin (masalan, chat xabarlari, tugma bosilishi, real-time API).


ðŸ“Œ RxJS qayerda ishlatiladi?

1. Angular ichida

Angular frameworkâ€™da HttpClient Observable qaytaradi, shuning uchun RxJS majburiy boâ€˜ladi.

this.http.get('https://api.example.com/users')
  .subscribe(data => {
    console.log(data);
  });


2. Eventlarni boshqarishda

DOM eventlarni kuzatishda:


import { fromEvent } from 'rxjs';

fromEvent(document, 'click')
  .subscribe(() => console.log('Klik boâ€˜ldi!'));


3. Formalar bilan ishlashda

Reactive formalarda valueChanges Observable boâ€˜ladi:

this.form.get('email')?.valueChanges
  .subscribe(value => console.log('Email oâ€˜zgardi:', value));


4. Real-time ilovalarda

Chat dasturlari (xabarlar oqimi)
Online oâ€˜yinlar (real-time voqealar)
Sensor maâ€™lumotlari (IoT, live data streaming)


5. Maâ€™lumotlarni transformatsiya qilishda

RxJSâ€™da juda koâ€˜p operatorlar bor (map, filter, debounceTime, mergeMap va boshqalar) â€” ular oqimni boshqaradi.


import { from } from 'rxjs';
import { map, filter } from 'rxjs/operators';

from([1, 2, 3, 4, 5])
  .pipe(
    filter(num => num % 2 === 0),
    map(num => num * 10)
  )
  .subscribe(result => console.log(result));
// Natija: 20, 40


ðŸ“Œ Nima uchun RxJS kerak?

Asinxron kodni boshqarish oson boâ€˜ladi (callback hell yoâ€˜qoladi).
Koâ€˜p oqimlarni birlashtirish mumkin (masalan, bir nechta API soâ€˜rovlarini ketma-ket yoki parallel boshqarish).
Eventlarni boshqarish qulay (kliklar, form inputlari, WebSocket maâ€™lumotlari).
Real-time ilovalar yaratish uchun juda kuchli vosita.